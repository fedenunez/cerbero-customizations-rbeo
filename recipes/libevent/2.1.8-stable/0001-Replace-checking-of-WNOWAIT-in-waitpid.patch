From e970444b33f3d47bbc911e9b2a10f30fd892a289 Mon Sep 17 00:00:00 2001
From: Azat Khuzhin <a3at.mail@gmail.com>
Date: Mon, 6 Mar 2017 00:05:50 +0300
Subject: [PATCH] Replace checking of WNOWAIT in waitpid() with waitid()

Because this adds dependency of running stuff from cmake for detecting what
platform support and we don't, but this doesn't work in cross-compiling.

Introduced-in: 43eb56c7c738e3642f0981e3dd6ab9e082eec798.
Fixes: #482
Fixes: #462
Refs: #475
---
 CMakeLists.txt                         |  2 --
 cmake/CheckWaitpidSupportWNOWAIT.cmake | 18 ------------------
 configure.ac                           | 20 --------------------
 event-config.h.cmake                   |  5 +----
 test/regress.c                         | 19 +++++++------------
 5 files changed, 8 insertions(+), 56 deletions(-)
 delete mode 100644 cmake/CheckWaitpidSupportWNOWAIT.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 343bf5f73..1eabc2433 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -494,8 +494,6 @@ CHECK_TYPE_SIZE("void *" EVENT__SIZEOF_VOID_P)
 #CHECK_FILE_OFFSET_BITS()
 #set(EVENT___FILE_OFFSET_BITS _FILE_OFFSET_BITS)
 
-include(CheckWaitpidSupportWNOWAIT)
-
 # Verify kqueue works with pipes.
 if (EVENT__HAVE_KQUEUE)
     if (CMAKE_CROSSCOMPILING AND NOT EVENT__FORCE_KQUEUE_CHECK)
diff --git a/cmake/CheckWaitpidSupportWNOWAIT.cmake b/cmake/CheckWaitpidSupportWNOWAIT.cmake
deleted file mode 100644
index 1a73db37b..000000000
--- a/cmake/CheckWaitpidSupportWNOWAIT.cmake
+++ /dev/null
@@ -1,18 +0,0 @@
-include(CheckCSourceRuns)
-
-check_c_source_runs(
-"
-#include <unistd.h>
-#include <sys/types.h>
-#include <sys/wait.h>
-#include <stdlib.h>
-
-int
-main(int argc, char** argv)
-{
-    pid_t pid;
-    int status;
-    if ((pid = fork()) == 0) _exit(0);
-    _exit(waitpid(pid, &status, WNOWAIT) == -1);
-}"
-EVENT__HAVE_WAITPID_WITH_WNOWAIT)
diff --git a/configure.ac b/configure.ac
index 47ba344a1..a127bbc91 100644
--- a/configure.ac
+++ b/configure.ac
@@ -599,26 +599,6 @@ main(int argc, char **argv)
 fi
 AM_CONDITIONAL(EPOLL_BACKEND, [test "x$haveepoll" = "xyes"])
 
-AC_MSG_CHECKING(waitpid support WNOWAIT)
-AC_TRY_RUN(
-#include <unistd.h>
-#include <sys/types.h>
-#include <sys/wait.h>
-#include <stdlib.h>
-
-int
-main(int argc, char** argv)
-{
-    pid_t pid;
-    int status;
-    if ((pid = fork()) == 0) _exit(0);
-    _exit(waitpid(pid, &status, WNOWAIT) == -1);
-}, [AC_MSG_RESULT(yes)
-AC_DEFINE(HAVE_WAITPID_WITH_WNOWAIT, 1,
-[Define if waitpid() supports WNOWAIT])
-], AC_MSG_RESULT(no), AC_MSG_RESULT(no))
-
-
 haveeventports=no
 AC_CHECK_FUNCS(port_create, [haveeventports=yes], )
 if test "x$haveeventports" = "xyes" ; then
diff --git a/event-config.h.cmake b/event-config.h.cmake
index 51ed1a182..65a0f5ddc 100644
--- a/event-config.h.cmake
+++ b/event-config.h.cmake
@@ -526,7 +526,4 @@
 
 #cmakedefine EVENT__NEED_DLLIMPORT 1
 
-/* Define if waitpid() supports WNOWAIT */
-#cmakedefine EVENT__HAVE_WAITPID_WITH_WNOWAIT 1
-
-#endif
+#endif /* \EVENT2_EVENT_CONFIG_H_INCLUDED_ */
diff --git a/test/regress.c b/test/regress.c
index d8a6b9b85..0da23b86c 100644
--- a/test/regress.c
+++ b/test/regress.c
@@ -852,14 +852,9 @@ static void
 test_fork(void)
 {
 	char c;
-	int status;
+	siginfo_t infop;
 	struct event ev, sig_ev, usr_ev, existing_ev;
 	pid_t pid;
-	int wait_flags = 0;
-
-#ifdef EVENT__HAVE_WAITPID_WITH_WNOWAIT
-	wait_flags |= WNOWAIT;
-#endif
 
 	setup_test("After fork: ");
 
@@ -933,15 +928,15 @@ test_fork(void)
 		tt_fail_perror("write");
 	}
 
-	TT_BLATHER(("Before waitpid"));
-	if (waitpid(pid, &status, wait_flags) == -1) {
-		perror("waitpid");
+	TT_BLATHER(("Before waitid"));
+	if (waitid(P_PID, pid, &infop, WEXITED | WNOWAIT) == -1) {
+		fprintf(stdout, "FAILED (waitid)\n");
 		exit(1);
 	}
-	TT_BLATHER(("After waitpid"));
+	TT_BLATHER(("After waitid"));
 
-	if (WEXITSTATUS(status) != 76) {
-		fprintf(stdout, "FAILED (exit): %d\n", WEXITSTATUS(status));
+	if (infop.si_status != 76) {
+		fprintf(stdout, "FAILED (exit): %d\n", infop.si_status);
 		exit(1);
 	}
 
